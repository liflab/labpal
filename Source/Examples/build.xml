<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
    A simple Ant build script for ParkBench labs
    Copyright (C) 2015-2016  Sylvain HallÃ©

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->
<project
  name="Laboratory"
  default="dist"
  basedir=".">
  
  <!--
    Default values. Replace these values with the ones specific to your
    project.
  -->
  
  <!-- The project's main class. This is used for the generation of the
       runable JAR file in the "jar" target -->
  <property name="build.mainclass" value="simple.SortingLab"/>
  
  <!-- Target jar file -->
  <property name="build.jar.filename" value="MyLab.jar"/>
  
  <!-- The location of parkbench.jar, relative to the location of
       the build.xml file for this test suite. Note that this is only
       important for compiling the test suite; afterwards, you can
       freely move around the resulting JAR, as it bundles parkbench.jar
       internally. -->
  <property name="build.parkbench" value="../../parkbench.jar"/>
  
  <!-- The project's author -->
  <property name="build.author" value="Emmett Brown"/>
  
  <!-- The project's display name -->
  <property name="build.name" value="ParkBench Test Suite"/>
  
  <!-- The project's version number -->
  <property name="build.version" value="1.0"/>
  
  <!-- The folder where libraries (ant-contrib, etc.) will be downloaded
       if necessary -->
  <property name="build.libdir" value="lib"/>
  
  <!-- The folder with the project's source files -->
  <property name="build.srcdir" value="src"/>
  
  <!-- The folder where the compiled files should go -->
  <property name="build.bindir" value="bin"/>
  
  <!-- The folder where the downloaded dependencies (if any) should go -->
  <property name="build.depdir" value="dep"/>

  <!-- The folder where the Javadoc files should go -->
  <property name="build.docdir" value="doc"/>
  
  <!-- Generate a jar with the documentation -->
  <property name="build.jar.withdoc" value="true"/>
  
  <!-- Generate a jar with the sources -->
  <property name="build.jar.withsrc" value="true"/>
  
  <!-- Generate a jar with the dependencies -->
  <property name="build.jar.withdeps" value="true"/>
  
  <!-- Base name of the jar to produce (used by the "zip" target) -->
  <basename property="build.jar.basename" file="${build.jar.filename}" suffix=".jar"/>
  
  <!-- Target: initialization
       All other targets should ultimately
       depend on this one (except perhaps very simple ones such as
       "clean".
  -->
  <target name="init" depends=""
    description="Initialize the project">
    <mkdir dir="${build.libdir}"/>
    <mkdir dir="${build.bindir}"/>
    <mkdir dir="${build.docdir}"/>
    <mkdir dir="${build.depdir}"/>
  </target>
  
  <!-- Target: zip
       Zips the jar
  -->
  <target name="zip" description="Zips the compiled jar">
    <delete file="${build.jar.basename}-${build.version}.zip"/>
    <zip basedir="." destfile="${build.jar.basename}-${build.version}.zip" includes="${build.jar.filename},Readme.md"/>
  </target>
  
  <!-- Target: dist
       This is the default target when Ant is invoked without an argument.
  -->
  <target name="dist" depends="jar" description="Same as jar">
    <!-- Do nothing -->
  </target>
  
  <!-- Target: compile
       Compiles the main project
  -->
  <target name="compile" depends="init" description="Compile the sources">
    <mkdir dir="${build.bindir}"/>
    <javac
      srcdir="${build.srcdir}"
      destdir="${build.bindir}"
      debug="${build.debug}"
      includeantruntime="false">
      <classpath>
        <pathelement location="${build.bindir}"/>
        <pathelement location="${build.depdir}"/>
        <pathelement path="${java.class.path}"/>
      </classpath>
    </javac>
    <copy todir="${build.bindir}" includeemptydirs="false">
      <fileset dir="${build.srcdir}" excludes="**/*.java"/>
    </copy>
  </target>
  
  <!-- Target: javadoc
       Generates the javadoc associated to the project
  -->
  <target name="javadoc" depends="init" description="Generate the documentation">
    <mkdir dir="${build.docdir}"/>
    <javadoc sourcepath="${build.srcdir}"
             destdir="${build.docdir}"
             packagenames="*"
             excludepackagenames=""
             defaultexcludes="yes"
             author="true"
             version="true"
             use="true"
             windowtitle="${build.name} Documentation">
      <doctitle><![CDATA[<h1>]]>${build.name}<![CDATA[ Documentation</h1>]]></doctitle>
      <bottom><![CDATA[<i>Copyright&nbsp;&#169; ]]>${build.author}<![CDATA[. All Rights Reserved.</i>]]></bottom>
      <link href="http://docs.oracle.com/javase/7/docs/api/"/>
    </javadoc>
  </target>
  
  <!-- Target: jar
       Generates a JAR file with the compiled files and javadoc
  -->
  <target name="jar" depends="compile" description="Create the runnable JAR">
      <tstamp>
         <format property="TODAY" pattern="yyyy-MM-dd HH:mm:ss" />
      </tstamp>
      <jar destfile="${build.jar.filename}" filesetmanifest="skip">
	  <manifest>
	      <attribute name="Main-Class" value="${build.mainclass}"/>
	      <attribute name="Class-Path" value="."/>
	      <attribute name="Built-By" value="${user.name}"/>
	      <attribute name="Built-Date" value="${TODAY}"/>
	      <attribute name="Implementation-Version" value="${build.version}"/>
	  </manifest>
	  <zipgroupfileset dir="${build.depdir}">
	    <include name="*" if="${build.jar.withdeps}"/>
	  </zipgroupfileset>
	  <fileset dir="${build.bindir}"/>
	  <fileset dir="${build.srcdir}">
	    <include name="*" if="${build.jar.withsrc}"/>
	  </fileset>
	  <fileset dir="${build.docdir}">
	    <include name="*" if="${build.jar.withdoc}"/>
	  </fileset>
      </jar>
  </target>
  
  <!-- Target: clean
       Wipes any temporary files or directories
  -->
  <target name="clean" description="Clean the project">
    <delete>
      <fileset dir="." includes="**/*.xml~"/>
    </delete>
    <delete dir="${build.libdir}"/>
    <delete dir="${build.bindir}"/>
    <delete dir="${build.docdir}"/>
    <delete dir="${build.depdir}"/>
  </target>
  
  <!-- Target: show-properties
       Prints all the properties.
  -->
  <target name="show-properties" depends="init" description="Print all properties">
      <echoproperties/>
  </target>
  
  <!-- Target: dummy
       Do nothing. This is only to test the build file
  -->
  <target name="dummy" description="Do nothing">
      <!-- Do nothing -->
  </target>
  
  <!-- Target: run
       Invokes the runnable jar generated by the "dist" target
  -->
  <target name="run" description="Invoke the runnable JAR">
    <java jar="${build.jar.filename}" fork="true"/>
  </target>
  
  <!-- Target: build-version
       Shows the version of this build script
  -->
  <target name="build-version" description="Show build script version">
    <echo message="Version ${build.version}" level="info"/>
  </target>
  
</project>
<!-- :tabWidth=2: -->
